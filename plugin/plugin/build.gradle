apply plugin: 'kotlin'
apply plugin: 'net.twisterrob.gradle.test'
version = '4.1.1.14-29-29.2'

repositories {
	maven {
		name = "ajoberstar-backup"; url = "https://ajoberstar.org/bintray-backup/"
		content {
			includeGroup("org.ajoberstar")
		}
	}
}

dependencies { // last checked 2020-11-04 (all latest, except Gradle+Kotlin)
	implementation gradleApi()
	// https://mvnrepository.com/artifact/org.tmatesoft.svnkit/svnkit
	implementation 'org.tmatesoft.svnkit:svnkit:1.10.1'
	implementation 'org.tmatesoft.svnkit:svnkit-cli:1.10.1'
	// https://github.com/ajoberstar/grgit/releases
	implementation 'org.ajoberstar.grgit:grgit-core:4.1.0'
	// https://developer.android.com/studio/releases/gradle-plugin.html#updating-gradle
	api 'com.android.tools.build:gradle:4.1.1'
	implementation 'org.jetbrains.kotlin:kotlin-gradle-plugin:1.3.72'
	implementation('org.gradle:gradle-kotlin-dsl:6.1.1') {
		transitive = false // make sure to not pull in kotlin-compiler-embeddable
	}
}

configurations.all {
	resolutionStrategy.eachDependency { DependencyResolveDetails dep ->
		if (dep.requested.group == 'org.jetbrains.kotlin' && dep.requested.name == 'kotlin-stdlib-jre7') {
			dep.useTarget("${dep.target.group}:kotlin-stdlib-jdk7:${dep.target.version}")
			dep.because 'https://issuetracker.google.com/issues/72274424'
		}
		if (dep.requested.group == 'org.jetbrains.kotlin' && dep.requested.name == 'kotlin-stdlib-jre8') {
			dep.useTarget("${dep.target.group}:kotlin-stdlib-jdk8:${dep.target.version}")
			dep.because 'https://issuetracker.google.com/issues/72274424'
		}
		// https://github.com/junit-team/junit4/pull/1608#issuecomment-496238766
		if (dep.requested.group == 'org.hamcrest') {
			switch (dep.requested.name) {
				case 'java-hamcrest':
					dep.useTarget("org.hamcrest:hamcrest:2.2")
					dep.because("2.0.0.0 shouldn't have been published")
					break
				case 'hamcrest-core':
					dep.useTarget("org.hamcrest:hamcrest:${dep.target.version}")
					dep.because("hamcrest-core doesn't contain anything")
					break
				case 'hamcrest-library':
					dep.useTarget("org.hamcrest:hamcrest:${dep.target.version}")
					dep.because("hamcrest-library doesn't contain anything")
					break
			}
		}
	}
}

dependencies { // test
	testImplementation("junit:junit:4.13.2") // needed for GradleRunnerRule superclass even when using Extension
	testImplementation("org.junit.jupiter:junit-jupiter-api:5.7.2")
	testImplementation("org.junit.jupiter:junit-jupiter-params:5.7.2")
	testRuntimeOnly("org.junit.jupiter:junit-jupiter-engine:5.7.2")

	testImplementation("org.junit-pioneer:junit-pioneer:1.4.2")

	testImplementation("org.hamcrest:hamcrest:2.2") {
		exclude group: "org.junit", module: "junit"
	}

	testImplementation "org.jetbrains:annotations:20.1.0"
	testImplementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:1.3.72"
	testImplementation("com.jakewharton.dex:dex-member-list:4.1.1") {
		exclude group: 'org.jetbrains.kotlin'
	}
}

jar {
	manifest {
		//noinspection UnnecessaryQualifiedReference
		attributes(
				"Implementation-Vendor": project.group,
				"Implementation-Title": project.name,
				"Implementation-Version": project.version,
				// parsed in net.twisterrob.gradle.builtDate (Global.kt)
				"Built-Date": java.time.format.DateTimeFormatter.ISO_INSTANT.format(java.time.Instant.now())
		)
	}
}

tasks.withType(Test) {
	useJUnitPlatform()

	// Enable verbose test logging, because sometimes AndroidBuildPluginIntgTest hangs, hopefully this will uncover it
	//noinspection UnnecessaryQualifiedReference
	testLogging.events = org.gradle.api.tasks.testing.logging.TestLogEvent.values().toList().toSet()
	// See GradleTestKitDirRelocator for what enables this!
	maxParallelForks = 10
	// Limit memory usage of test forks. Gradle <5 allows 1/4th of total memory to be used, thus forbidding many forks.
	maxHeapSize = "256M"
}

tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).configureEach {
	it.kotlinOptions.jvmTarget = JavaVersion.VERSION_1_8.toString()
}
